"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCamera } from "@fortawesome/free-solid-svg-icons";
import { Image as ImageIcon, UploadCloud, X } from "lucide-react";

/** ---------- Types ---------- */
export type DamageSide = "‡∏ã‡πâ‡∏≤‡∏¢" | "‡∏Ç‡∏ß‡∏≤" | "‡∏´‡∏ô‡πâ‡∏≤" | "‡∏´‡∏•‡∏±‡∏á" | "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

export type DamagePhotoItem = {
  id: string;
  file: File | null; // ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL)
  previewUrl: string; // blob:... ‡∏´‡∏£‡∏∑‡∏≠ https://...
  side: DamageSide;
  detecting: boolean;
  error?: string;
  total?: number;
  perClass?: Record<string, number>;
  note?: string;
};

type Props = {
  apiBaseUrl: string;
  value?: DamagePhotoItem[];
  onChange?: (items: DamagePhotoItem[]) => void;
  maxTotalMB?: number; // default 100
};

/** ---------- Component ---------- */
export default function DamagePhotosPanel({
  apiBaseUrl,
  value ,
  onChange,
  maxTotalMB = 100,
}: Props) {
  const [items, setItems] = useState<DamagePhotoItem[]>([]);
  const [selectedId, setSelectedId] = useState<string | null>(null);

  const inputRef = useRef<HTMLInputElement | null>(null);

  // sync parent -> local (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô value ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ)
  useEffect(() => {
    if (!value) return;

    // ‡∏ó‡∏≥ deep compare ‡πÅ‡∏Ñ‡πà id
    const same =
      value.length === items.length &&
      value.every((v, i) => v.id === items[i]?.id);

    if (!same) {
      setItems(value);
      if (!selectedId && value.length > 0) {
        setSelectedId(value[0].id);
      }
    }
  }, [value]); // ‚úÖ ‡πÄ‡∏≠‡∏≤ selectedId ‡∏≠‡∏≠‡∏Å

  // emit local -> parent
  useEffect(() => {
    if (onChange) {
      onChange(items);
    }
  }, [items, onChange]);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ) ‡πÅ‡∏•‡∏∞ emit ‡πÑ‡∏õ parent
  const mutate = (fn: (prev: DamagePhotoItem[]) => DamagePhotoItem[]) => {
    setItems((prev) => {
      const next = fn(prev);
      // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà sync ‡∏à‡∏≤‡∏Å parent
      // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ useEffect([items]) ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô emit (‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á flag)
      return next;
    });
  };

  /** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (image/*) */
  const addFiles = (files: FileList | null, side: DamageSide = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") => {
    if (!files) return;

    const newOnes: DamagePhotoItem[] = Array.from(files)
      .filter((f) => f.type.startsWith("image/"))
      .map((file) => ({
        // ‚úÖ random id ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠ force re-render
        id: `${crypto.randomUUID()}_${Date.now()}`,
        file,
        previewUrl: URL.createObjectURL(file),
        side,
        detecting: false,
      }));

    mutate((prev) => [...prev, ...newOnes]);
  };
  /** ‡∏•‡∏ö‡∏£‡∏π‡∏õ + revoke ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ blob: */
  const removeOne = (id: string) => {
    mutate((prev) => {
      const it = prev.find((x) => x.id === id);
      if (it && it.previewUrl.startsWith("blob:")) URL.revokeObjectURL(it.previewUrl);
      return prev.filter((x) => x.id !== id);
    });
  };

  /** ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ */
  const setSide = (id: string, side: DamageSide) =>
    mutate((prev) => prev.map((x) => (x.id === id ? { ...x, side } : x)));


  const updateNote = (id: string, note: string) =>
    mutate((prev) => prev.map((x) => (x.id === id ? { ...x, note } : x)));

  const selectedItem = items.find((x) => x.id === selectedId);
    // üü£ cleanup blob URL ‡πÄ‡∏ß‡∏•‡∏≤ component ‡∏ñ‡∏π‡∏Å unmount
  useEffect(() => {
    return () => {
      items.forEach((it) => {
        if (it.previewUrl.startsWith("blob:")) {
          URL.revokeObjectURL(it.previewUrl);
        }
      });
    };
  }, [items]);

  return (
    <div className="rounded-[7px] p-4 bg-white">
      {/* üü£ ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î 4 ‡∏î‡πâ‡∏≤‡∏ô */}
      <div className="flex justify-center my-6">
        <div className="relative w-[300px] m-8">
          <img src="/elements/car-top-view.png" alt="car" className="w-full" />
          {(["‡∏´‡∏ô‡πâ‡∏≤", "‡∏´‡∏•‡∏±‡∏á", "‡∏ã‡πâ‡∏≤‡∏¢", "‡∏Ç‡∏ß‡∏≤"] as DamageSide[]).map((side, i) => (
            <label
              key={i}
              className="group absolute w-10 h-10 flex items-center justify-center rounded-full 
                 bg-[#433D8B] border-[6px] border-[#D9D4F3] shadow-lg cursor-pointer 
                 hover:bg-[#433D8B]/80 transition-all duration-300 
                 hover:scale-110 hover:ring-4 hover:ring-[#433D8B]/40 active:scale-95"
              style={{
                ...(side === "‡∏´‡∏ô‡πâ‡∏≤" && {
                  top: "-3rem",
                  left: "50%",
                  transform: "translateX(-50%)",
                }),
                ...(side === "‡∏´‡∏•‡∏±‡∏á" && {
                  bottom: "-3rem",
                  left: "50%",
                  transform: "translateX(-50%)",
                }),
                ...(side === "‡∏ã‡πâ‡∏≤‡∏¢" && {
                  top: "50%",
                  left: "-1.5rem",
                  transform: "translateY(-50%)",
                }),
                ...(side === "‡∏Ç‡∏ß‡∏≤" && {
                  top: "50%",
                  right: "-1.5rem",
                  transform: "translateY(-50%)",
                }),
              }}
            >
              <FontAwesomeIcon icon={faCamera} className="w-4 h-4 text-white" />
              <input
                type="file"
                accept="image/*"
                multiple
                className="hidden"
                onChange={(e) => {
                  addFiles(e.target.files, side);
                  // ‚úÖ reset value ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ
                  e.target.value = "";
                }}
              />
            </label>
          ))}
        </div>
      </div>

      {/* üü£ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ + Preview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Sidebar */}
        <div className="bg-violet-50 rounded-lg p-4 flex flex-col">
          <h3 className="text-sm font-semibold text-zinc-800 mb-3 flex items-center gap-2">
            <UploadCloud className="w-4 h-4 text-violet-600" /> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
          </h3>

          {items.length === 0 ? (
            <div className="text-sm text-black text-center">
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
            </div>
          ) : (
            <div className="flex-1 space-y-3 overflow-y-auto">
              <ul className="space-y-2">
                {items.map((it) => (
                  <li
                    key={it.id}
                    className={`relative flex items-center gap-2 px-3 py-2 rounded-md text-sm transition cursor-pointer ${
                      selectedId === it.id
                        ? "bg-violet-600 text-white"
                        : "bg-white hover:bg-violet-100 text-zinc-700"
                    }`}
                    onClick={() => setSelectedId(it.id)}
                  >
                    <ImageIcon className="w-4 h-4" />
                    <span className="flex-1 truncate">{it.id.slice(0, 10)}...</span>

                    {/* Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô */}
                    <select
                      value={it.side}
                      onChange={(e) =>
                        setSide(it.id, e.target.value as DamageSide)
                      }
                      className="rounded-full bg-[#DEDCFF]/70 text-black text-xs px-2 py-1 mr-6"
                    >
                      <option value="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
                      <option value="‡∏ã‡πâ‡∏≤‡∏¢">‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</option>
                      <option value="‡∏Ç‡∏ß‡∏≤">‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤</option>
                      <option value="‡∏´‡∏ô‡πâ‡∏≤">‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤</option>
                      <option value="‡∏´‡∏•‡∏±‡∏á">‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á</option>
                    </select>

                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö */}
                    <button
                      type="button"
                      onClick={(e) => {
                        e.stopPropagation();
                        removeOne(it.id);
                      }}
                      className={`absolute top-1 right-1 rounded-[8px] transition ${
                        selectedId === it.id
                          ? "bg-[#FF4A4A] text-white hover:bg-[#e53e3e]"
                          : "bg-zinc-200 text-zinc-600 hover:bg-red-100 hover:text-red-600"
                      }`}
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* Preview */}
        <div className="md:col-span-2 bg-zinc-50 rounded-lg p-4 shadow flex items-center justify-center">
          {selectedItem ? (
            <div className="flex flex-col space-y-3 w-full">
              <div className="flex justify-center">
                <img
                  src={selectedItem.previewUrl}
                  alt="preview"
                  className="max-h-[360px] rounded object-contain"
                />
              </div>
              <div>
                <p className="font-medium text-black text-sm mb-1">
                  ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
                </p>
                <textarea
                  value={selectedItem.note || ""}
                  onChange={(e) =>
                    updateNote(selectedItem.id, e.target.value)
                  }
                  placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û..."
                  className="w-full rounded px-3 py-2 text-sm resize-none bg-white text-black rounded-[8px]"
                  rows={3}
                />
              </div>
            </div>
          ) : (
            <p className="text-sm text-center text-zinc-500">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </p>
          )}
        </div>
      </div>
    </div>
  );
}
