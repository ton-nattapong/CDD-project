"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import DamagePhotosPanel, { DamagePhotoItem } from "../components/DamagePhotosPanel";
import SafeAreaSpacer from "../components/SafeAreaSpacer";
import MapPickerModal from "../components/MapPickerModal";
import MapPreview from "../components/MapPreview";
import "leaflet/dist/leaflet.css";
interface AccidentDetailsProps { onNext: () => void; onBack: () => void; }

type SavedDamage = {
  url: string;
  type: "image" | "video";
  publicId?: string;
  side?: "‡∏ã‡πâ‡∏≤‡∏¢" | "‡∏Ç‡∏ß‡∏≤" | "‡∏´‡∏ô‡πâ‡∏≤" | "‡∏´‡∏•‡∏±‡∏á" | "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
  total?: number;
  perClass?: Record<string, number>;
  note?: string;
};
type MediaItem = { url: string; type: "image" | "video"; publicId?: string };
type AccidentType =
  | "‡∏ñ‡∏π‡∏Å‡∏ä‡∏ô‡∏Ç‡∏ô‡∏∞‡∏à‡∏≠‡∏î‡∏≠‡∏¢‡∏π‡πà" | "‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏Å‡πÉ‡∏™‡πà" | "‡∏ä‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå" | "‡∏ä‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á" | "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ" | "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°" | "‡∏¢‡∏≤‡∏á‡∏£‡∏±‡πà‡∏ß/‡∏¢‡∏≤‡∏á‡πÅ‡∏ï‡∏Å" | "‡∏≠‡∏∑‡πà‡∏ô‡πÜ";


const ACCIDENT_TYPES: { key: AccidentType; label: string; image?: string }[] = [
  { key: "‡∏ñ‡∏π‡∏Å‡∏ä‡∏ô‡∏Ç‡∏ô‡∏∞‡∏à‡∏≠‡∏î‡∏≠‡∏¢‡∏π‡πà", label: "‡∏ñ‡∏π‡∏Å‡∏ä‡∏ô‡∏Ç‡∏ô‡∏∞‡∏à‡∏≠‡∏î‡∏≠‡∏¢‡∏π‡πà", image: "/accident-icons/hit.png" },
  { key: "‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏Å‡πÉ‡∏™‡πà", label: "‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏Å‡πÉ‡∏™‡πà", image: "/accident-icons/drop.png" },
  { key: "‡∏ä‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå", label: "‡∏ä‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå", image: "/accident-icons/animal.png" },
  { key: "‡∏ä‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á", label: "‡∏ä‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á", image: "/accident-icons/crash.png" },
  { key: "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ", label: "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ", image: "/accident-icons/fire.png" },
  { key: "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°", label: "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°", image: "/accident-icons/flood.png" },
  { key: "‡∏¢‡∏≤‡∏á‡∏£‡∏±‡πà‡∏ß/‡∏¢‡∏≤‡∏á‡πÅ‡∏ï‡∏Å", label: "‡∏¢‡∏≤‡∏á‡∏£‡∏±‡πà‡∏ß/‡∏¢‡∏≤‡∏á‡πÅ‡∏ï‡∏Å", image: "/accident-icons/wheel.png" },
  { key: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", label: "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ", image: "/accident-icons/etc.png" },
];

const DISTRICTS_BY_PROVINCE: Record<string, string[]> = {
  ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£: ["‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£", "‡∏î‡∏∏‡∏™‡∏¥‡∏ï", "‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å", "‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å", "‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô", "‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡∏õ‡∏¥", "‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô", "‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡πà‡∏≤‡∏¢"],
  ‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ö‡∏≤‡∏á‡∏ö‡∏±‡∏ß‡∏ó‡∏≠‡∏á", "‡∏õ‡∏≤‡∏Å‡πÄ‡∏Å‡∏£‡πá‡∏î", "‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ß‡∏¢", "‡∏ö‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà", "‡πÑ‡∏ó‡∏£‡∏ô‡πâ‡∏≠‡∏¢"],
  ‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á", "‡∏ò‡∏±‡∏ç‡∏ö‡∏∏‡∏£‡∏µ", "‡∏´‡∏ô‡∏≠‡∏á‡πÄ‡∏™‡∏∑‡∏≠", "‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏∏‡∏°‡πÅ‡∏Å‡πâ‡∏ß", "‡∏•‡∏≥‡∏•‡∏π‡∏Å‡∏Å‡∏≤"],
  ‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£", "‡∏ö‡∏≤‡∏á‡∏ö‡πà‡∏≠", "‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ", "‡∏û‡∏£‡∏∞‡∏õ‡∏£‡∏∞‡πÅ‡∏î‡∏á", "‡∏û‡∏£‡∏∞‡∏™‡∏°‡∏∏‡∏ó‡∏£‡πÄ‡∏à‡∏î‡∏µ‡∏¢‡πå", "‡∏ö‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡∏ò‡∏á"],
  ‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ö‡∏≤‡∏á‡∏•‡∏∞‡∏°‡∏∏‡∏á", "‡∏®‡∏£‡∏µ‡∏£‡∏≤‡∏ä‡∏≤", "‡∏û‡∏≤‡∏ô‡∏ó‡∏≠‡∏á", "‡∏™‡∏±‡∏ï‡∏´‡∏µ‡∏ö"],
  ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏™‡∏≤‡∏£‡∏†‡∏µ", "‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢", "‡∏™‡∏±‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á", "‡πÅ‡∏°‡πà‡∏£‡∏¥‡∏°", "‡∏´‡∏≤‡∏á‡∏î‡∏á"],
  ‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏õ‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á", "‡πÇ‡∏ô‡∏ô‡∏™‡∏π‡∏á", "‡∏™‡∏π‡∏á‡πÄ‡∏ô‡∏¥‡∏ô", "‡∏™‡∏µ‡∏Ñ‡∏¥‡πâ‡∏ß"],
  ‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏ú‡πà", "‡∏ô‡πâ‡∏≥‡∏û‡∏≠‡∏á", "‡∏ä‡∏∏‡∏°‡πÅ‡∏û", "‡∏û‡∏•"],
  ‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï: ["‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏Å‡∏∞‡∏ó‡∏π‡πâ", "‡∏ñ‡∏•‡∏≤‡∏á"],
};
const PROVINCES = Object.keys(DISTRICTS_BY_PROVINCE);

const CAR_KEY = "claimSelectedCar";
const ACC_KEY = "accidentDraft";
/* ---------- helpers (‡∏Ñ‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå input ‡πÄ‡∏î‡∏¥‡∏°) ---------- */

function labelEl(text: string, required?: boolean, hint?: string) {
  return (
    <div className="mb-1 flex items-center gap-2">
      <span className="text-sm font-medium text-zinc-800">{text}</span>
      {required && <span className="rounded-full bg-violet-100 px-2 py-0.5 text-[11px] font-medium text-violet-700">‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</span>}
      {hint && <span className="text-xs text-zinc-500">{hint}</span>}
    </div>
  );
}

function fieldSurface({
  required, filled, invalid,
}: { required?: boolean; filled?: boolean; invalid?: boolean }) {
  const base = "rounded-[7px] border px-3 py-2 sm:py-2.5 text-zinc-900 shadow-[inset_0_0_0_1px_rgba(0,0,0,0.03)] transition outline-none w-full ";
  if (invalid) return `${base} bg-[#D9D9D9] border-zinc-200 focus:ring-2 focus:ring-zinc-500`;
  if (required && !filled) return `${base} bg-[#D9D9D9] border-zinc-200 focus:ring-2 focus:ring-zinc-500`;
  return `${base} bg-white border-zinc-200 focus:ring-2 focus:ring-violet-500`;
}

function FieldWithIcon({ icon, children }: { icon?: React.ReactNode; children: React.ReactNode }) {
  return (
    <div className="relative min-w-0 w-full">
      {icon && <span className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-zinc-400">{icon}</span>}
      <div className={icon ? "pl-8 min-w-0 w-full" : "min-w-0 w-full"}>{children}</div>
    </div>
  );
}
function toDateInputValue(iso?: string): string {
  if (!iso) return "";
  if (/^\d{4}-\d{2}-\d{2}$/.test(iso)) return iso; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  return new Date(iso).toISOString().slice(0, 10); // 2025-09-09
}

function toTimeInputValue(iso?: string): string {
  if (!iso) return "";
  if (/^\d{2}:\d{2}(:\d{2})?$/.test(iso)) return iso; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HH:mm ‡∏´‡∏£‡∏∑‡∏≠ HH:mm:ss ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  return new Date(iso).toISOString().slice(11, 16); // 17:00
}


/* ---------- component ---------- */

export default function AccidentDetails({ onNext, onBack }: AccidentDetailsProps) {
  const [accidentType, setAccidentType] = useState<AccidentType>("‡∏ä‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");
  const [province, setProvince] = useState("");
  const [district, setDistrict] = useState("");
  const [road, setRoad] = useState("");
  const [areaType, setAreaType] = useState("");
  const [nearby, setNearby] = useState("");
  const [details, setDetails] = useState("");

  const [showMapPicker, setShowMapPicker] = useState(false);
  const [lat, setLat] = useState<string>("");
  const [lng, setLng] = useState<string>("");
  const [accuracy, setAccuracy] = useState<number | null>(null);
  const [geoStatus, setGeoStatus] = useState<"idle" | "loading" | "success" | "error">("idle");
  const [geoError, setGeoError] = useState<string>("");

  const [evidenceFiles, setEvidenceFiles] = useState<File[]>([]);
  const [uploadedEvidence, setUploadedEvidence] = useState<MediaItem[]>([]);
  const [damageItems, setDamageItems] = useState<DamagePhotoItem[]>([]);
  const [agreed, setAgreed] = useState(false);

  // ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
  const [preview, setPreview] = useState<{ open: boolean; src: string; type: "image" | "video" }>({
    open: false,
    src: "",
    type: "image",
  });
  const tempObjectUrlRef = useRef<string | null>(null);

  const openPreviewFromUploaded = (m: MediaItem) => {
    setPreview({ open: true, src: m.url, type: m.type });
  };

  const openPreviewFromFile = (file: File) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const url = URL.createObjectURL(file);
    if (tempObjectUrlRef.current) URL.revokeObjectURL(tempObjectUrlRef.current);
    tempObjectUrlRef.current = url;
    setPreview({ open: true, src: url, type: file.type.startsWith("video/") ? "video" : "image" });
  };

  const closePreview = () => {
    if (tempObjectUrlRef.current) {
      URL.revokeObjectURL(tempObjectUrlRef.current);
      tempObjectUrlRef.current = null;
    }
    setPreview({ open: false, src: "", type: "image" });
  };

  // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  const removeUploadedEvidence = (idx: number) =>
    setUploadedEvidence(prev => prev.filter((_, i) => i !== idx));

  const removeLocalEvidence = (idx: number) =>
    setEvidenceFiles(prev => prev.filter((_, i) => i !== idx));

  // ‡∏Å‡∏±‡∏ô‡∏•‡∏∑‡∏° revoke ‡∏ï‡∏≠‡∏ô unmount
  useEffect(() => {
    return () => {
      if (tempObjectUrlRef.current) URL.revokeObjectURL(tempObjectUrlRef.current);
    };
  }, []);
  const mapSavedToPanel = (arr: SavedDamage[] = []): DamagePhotoItem[] =>
    arr.map((p) => ({
      id: p.publicId || crypto.randomUUID(),
      file: null,               // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏õ‡πá‡∏ô URL)
      previewUrl: p.url,                   // ‚úÖ ‡πÉ‡∏´‡πâ img ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
      side: p.side ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      detecting: false,
      total: p.total,
      perClass: p.perClass,
      note: p.note,
    }));

  useEffect(() => {
    try {
      const rawCar = localStorage.getItem(CAR_KEY);
      const selectedCar = rawCar ? JSON.parse(rawCar) : null;

      const rawAcc = localStorage.getItem(ACC_KEY);
      const a = rawAcc ? JSON.parse(rawAcc) : null;

      if (a) {
        console.log("Restoring saved accident draft:", a);
        console.log("üÜî Claim ID:", a.claim_id);
        console.log("üë§ User ID:", a.user_id);
        console.log("üìå Status:", a.status);
        console.log("üöò Selected Car ID:", a.selected_car_id);
        console.log("üìÑ Accident Detail ID:", a.accident_detail_id);
        console.log("‚è± Created At:", a.created_at);

        setAccidentType(a.accidentType as AccidentType);
        setDate(toDateInputValue(a.date));
        setTime(toTimeInputValue(a.time));
        setProvince(a.province || "");
        setDistrict(a.district || "");
        setRoad(a.road || "");
        setAreaType(a.areaType || "");
        setNearby(a.nearby || "");
        setDetails(a.details || "");
        setUploadedEvidence(a.evidenceMedia || []);
        setDamageItems(mapSavedToPanel(a.damagePhotos));
        console.log("DamageItems:", a.damagePhotos);

        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏™‡∏°‡∏≠
        const loc = a.location || {};
        setLat(typeof loc.lat === "number" ? loc.lat.toFixed(6) : (loc.lat ?? ""));
        setLng(typeof loc.lng === "number" ? loc.lng.toFixed(6) : (loc.lng ?? ""));
        setAccuracy(typeof loc.accuracy === "number" ? loc.accuracy : null);

        // ‚¨áÔ∏è ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ selectedCar ‡πÅ‡∏ï‡πà draft ‡∏°‡∏µ selected_car_id ‚Üí ‡∏¢‡∏¥‡∏á API
        if (!selectedCar && a.selected_car_id) {
          fetch(`${process.env.NEXT_PUBLIC_URL_PREFIX}/api/policy/by-id/${a.selected_car_id}`, {
            credentials: "include",
          })
            .then((res) => {
              if (!res.ok) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
              return res.json();
            })
            .then((data) => {
              if (Array.isArray(data) && data.length > 0) {
                console.log("üìÑ Car from API:", data[0]);
                localStorage.setItem(CAR_KEY, JSON.stringify(data[0]));
                // set state
                // üëâ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÉ‡∏ä‡πâ setCar ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô component
                // setCar(data[0]);
              }
            })
            .catch((err) => {
              console.error("fetch car error:", err);
            });
        }
      }

      if (selectedCar?.id) {
        console.log("üöó Car ID:", selectedCar.id);
        // setCar(selectedCar); // ‡πÉ‡∏ä‡πâ car ‡∏à‡∏≤‡∏Å localStorage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      }
    } catch (e) {
      console.warn("Failed to restore draft:", e);
    }
  }, []);

  const isValid = useMemo(() => {
    const hasNearby = nearby.trim().length > 0;
    const hasDetails = details.trim().length > 0;

    const hasAnyEvidence = evidenceFiles.length > 0 || uploadedEvidence.length > 0;

    return Boolean(
      date && time && areaType && lat && lng &&
      hasNearby && hasDetails &&
      agreed &&
      hasAnyEvidence &&
      damageItems.length > 0
    );
  }, [date, time, areaType, lat, lng, nearby, details, agreed, evidenceFiles.length, uploadedEvidence.length, damageItems.length]);

  const openMapPicker = () => {
    setGeoStatus("idle");
    setGeoError("");
    setShowMapPicker(true);
  };



  async function uploadToCloudinary(file: File): Promise<MediaItem> {
    const cloud = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD!;
    const preset = process.env.NEXT_PUBLIC_CLOUDINARY_PRESET!;
    const fd = new FormData(); fd.append("file", file); fd.append("upload_preset", preset);
    const res = await fetch(`https://api.cloudinary.com/v1_1/${cloud}/auto/upload`, { method: "POST", body: fd });
    const data = await res.json();
    if (!res.ok) throw new Error(data?.error?.message || "Upload failed");
    return { url: data.secure_url as string, type: data.resource_type as "image" | "video", publicId: data.public_id as string };
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isValid) return;
    try {
      const newEvidenceUploads: MediaItem[] = await Promise.all(
        evidenceFiles.map(uploadToCloudinary)
      );
      const evidenceMedia: MediaItem[] = [
        ...uploadedEvidence,
        ...newEvidenceUploads,
      ];

      const damagePhotos = await Promise.all(
        damageItems.map(async (it) => {
          if (it.file) {
            const up = await uploadToCloudinary(it.file);
            return {
              url: up.url,
              type: up.type,
              publicId: up.publicId,
              side: it.side,
              total: it.total,
              perClass: it.perClass,
              note: it.note,
            };
          }
          return {
            url: it.previewUrl,
            type: "image",
            publicId: it.id,
            side: it.side,
            total: it.total,
            perClass: it.perClass,
            note: it.note,
          };
        })
      );

      const orNull = (v: string) =>
        v && v.trim() !== "" && v.trim() !== "-" ? v.trim() : null;

      // ‡∏î‡∏∂‡∏á draft ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
      const oldDraftRaw = localStorage.getItem(ACC_KEY);
      const oldDraft = oldDraftRaw ? JSON.parse(oldDraftRaw) : {};

      // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° (status, claim_id, selected_car_id ‡∏Ø‡∏•‡∏Ø) + ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà
      const payload = {
        ...oldDraft, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
        accidentType,
        date,
        time,
        province: orNull(province),
        district: orNull(district),
        road: orNull(road),
        areaType,
        nearby,
        details,
        location: { lat: Number(lat), lng: Number(lng), accuracy },
        evidenceMedia,
        damagePhotos,
      };

      localStorage.setItem(ACC_KEY, JSON.stringify(payload));
      onNext();
    } catch (err: any) {
      alert(`‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err?.message ?? "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"}`);
    }
  };


  return (
    <div className="acc-page box-border mx-auto max-w-5xl px-3 sm:px-4 md:px-6 overflow-x-hidden">
      {/* ‡∏ä‡∏¥‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ */}
      <div className="mb-5">
        <div className="mb-5 flex items-center justify-center gap-2">

          <h2 className="text-base sm:text-lg font-semibold text-zinc-900">‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏</h2>

        </div>
        <div
          className="-mx-3 px-3 py-3 sm:mx-0 sm:px-0 chip-scroller flex gap-3 sm:gap-4 overflow-x-auto scroll-smooth"
          style={{
            scrollbarWidth: "thin", // Firefox
            scrollbarColor: "#6D5BD0 #E5E7EB", // ‡∏™‡∏µ thumb / track
          }}
        >
          {ACCIDENT_TYPES.map((t) => {
            const active = accidentType === t.key;
            return (
              <div
                key={t.key}
                className="flex flex-col items-center w-[150px] sm:w-[180px] shrink-0 p-2 "
                style={{ scrollSnapAlign: "start" }}
              >
                <button
                  type="button"
                  onClick={() => setAccidentType(t.key)}
                  className={[
                    "w-full h-[150px] rounded-[12px] ring-1 flex items-center justify-center transition-all duration-300 transform ",
                    active
                      ? "bg-gradient-to-b from-[#6D5BD0] to-[#433D8B] text-white ring-violet-300 scale-105 shadow-lg"
                      : "bg-[#C6C6C6] text-zinc-700 ring-zinc-200 hover:bg-[#d8d8d8] hover:scale-105 hover:shadow-md",
                  ].join(" ")}
                >
                  {t.image && (
                    <img
                      src={t.image}
                      alt={t.label}
                      className="object-contain transition-transform duration-300 group-hover:scale-110"
                      draggable={false}
                    />
                  )}
                </button>
                <span
                  className={[
                    "mt-2 text-sm font-semibold text-center transition-colors duration-300",
                    active ? "text-[#433D8B]" : "text-zinc-800 group-hover:text-[#6D5BD0]",
                  ].join(" ")}
                >
                  {t.label}
                </span>
              </div>
            );
          })}
        </div>


      </div>



      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° */}
      <form  onSubmit={handleSubmit} className=" max-w-full  bg-white   p-6 space-y-8">
        {/*  ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
        <div>
          {labelEl("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", true)}
          <textarea className={fieldSurface({ required: true, filled: !!details }) + " min-h-[96px]"} placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠" value={details} onChange={(e) => setDetails(e.target.value)} />
        </div>
        <div className="mb-5 flex items-center justify-center gap-2">

          <h2 className="text-base sm:text-lg font-semibold text-zinc-900">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏</h2>

        </div>
        {/* Section 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            {labelEl("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏", true)}
            <input type="date" className={fieldSurface({ required: true, filled: !!date })} value={date} onChange={(e) => setDate(e.target.value)} />
          </div>

          <div>
            {labelEl("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏", true)}
            <input type="time" className={fieldSurface({ required: true, filled: !!time })} value={time} onChange={(e) => setTime(e.target.value)} />
          </div>

          <div>
            {labelEl("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")}
            <select className={fieldSurface({ filled: !!province })} value={province} onChange={(e) => setProvince(e.target.value)}>
              <option value="">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
              {PROVINCES.map(p => <option key={p}>{p}</option>)}
            </select>
          </div>

          <div>
            {labelEl("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï")}
            <select className={fieldSurface({ filled: !!district })} value={district} disabled={!province} onChange={(e) => setDistrict(e.target.value)}>
              <option value="">{province ? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" : "‚Äî"}</option>
              {(DISTRICTS_BY_PROVINCE[province] || []).map(d => <option key={d}>{d}</option>)}
            </select>
          </div>

          <div className="md:col-span-2">
            {labelEl("‡∏ñ‡∏ô‡∏ô")}
            <input type="text" placeholder="‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö" className={fieldSurface({ filled: !!road })} value={road} onChange={(e) => setRoad(e.target.value)} />
          </div>

          <div>
            {labelEl("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", true)}
            <select className={fieldSurface({ required: true, filled: !!areaType })} value={areaType} onChange={(e) => setAreaType(e.target.value)}>
              <option value="">‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
              <option>‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á</option>
              <option>‡∏ä‡∏∏‡∏°‡∏ä‡∏ô/‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô</option>
              <option>‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á</option>
            </select>
          </div>

          <div>
            {labelEl("‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á", true)}
            <textarea className={fieldSurface({ required: true, filled: !!nearby }) + " min-h-[96px]"} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô..." value={nearby} onChange={(e) => setNearby(e.target.value)} />
          </div>


        </div>



        <div className="grid grid-cols-1 md:grid-cols-1">
          <div>
            {labelEl("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏ (GPS/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)")}
            <button onClick={openMapPicker} type="button" className="mt-2 mb-2 rounded-[7px] bg-[#6D5BD0] px-8 py-2 text-sm text-white hover:bg-[#433D8B] ">
              ‡∏£‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            </button>
            {/* {lat && lng && (
              <div className="mt-2 text-xs text-zinc-700  rounded px-3 py-2">
                ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {lat}, {lng}
              </div>
            )} */}
          </div>
          <div>
            {lat && lng && (
              <MapPreview
                lat={parseFloat(lat)}
                lng={parseFloat(lng)}
              />
            )}
          </div>
        </div>





        {/* 5) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô */}
        <div className="mt-6 min-w-0">
          {labelEl("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", true)}

          <input
            type="file"
            accept="image/*,video/*"
            multiple
            onChange={(e) => setEvidenceFiles(Array.from(e.target.files || []))}
            className="block w-full cursor-pointer rounded-[7px] border border-zinc-300 bg-white px-3 py-2 text-sm text-zinc-800 file:mr-3 file:rounded-[7px] file:border-0 file:bg-zinc-800 file:px-3 file:py-2 file:text-white hover:file:bg-zinc-700"
            required={uploadedEvidence.length === 0}
          />

          {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏°‡∏≤‡∏à‡∏≤‡∏Å Cloudinary / draft) */}
          {uploadedEvidence.length > 0 && (
            <>
              <p className="mt-2 text-xs font-medium text-zinc-700">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
              <ul className="mt-1 max-h-40 overflow-auto list-disc space-y-1 pl-5 text-xs text-zinc-700 break-all">
                {uploadedEvidence.map((m, i) => (
                  <li key={m.publicId || m.url} className="flex items-center gap-2">
                    <button
                      type="button"
                      className="truncate text-indigo-600 hover:underline"
                      title={m.publicId || m.url}
                      onClick={() => openPreviewFromUploaded(m)}
                    >
                      {m.publicId || m.url}
                    </button>
                    <button
                      type="button"
                      onClick={() => removeUploadedEvidence(i)}
                      className="shrink-0 rounded-[7px] bg-rose-100 px-2 py-0.5 text-[11px] font-medium text-rose-700 hover:bg-rose-200"
                    >
                      ‡∏•‡∏ö
                    </button>
                  </li>
                ))}
              </ul>
            </>
          )}

          {/* ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î) */}
          {evidenceFiles.length > 0 && (
            <>
              <p className="mt-3 text-xs font-medium text-zinc-700">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î)</p>
              <ul className="mt-1 max-h-40 overflow-auto list-disc space-y-1 pl-5 text-xs text-zinc-700 break-all">
                {evidenceFiles.map((f, i) => (
                  <li key={`${f.name}-${i}`} className="flex items-center gap-2">
                    <button
                      type="button"
                      className="truncate text-indigo-600 hover:underline"
                      title={f.name}
                      onClick={() => openPreviewFromFile(f)}
                    >
                      {f.name}
                    </button>
                    <button
                      type="button"
                      onClick={() => removeLocalEvidence(i)}
                      className="shrink-0 rounded-[7px] bg-rose-100 px-2 py-0.5 text-[11px] font-medium text-rose-700 hover:bg-rose-200"
                    >
                      ‡∏•‡∏ö
                    </button>
                  </li>
                ))}
              </ul>
            </>
          )}

          <p className="mt-1 text-xs text-zinc-500">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏ß‡∏° ‚â§ 100MB)</p>
        </div>
{/* Modal ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß */}
        {preview.open && (
          <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4"
            onClick={closePreview}
          >
            <div
              className="relative w-full max-w-3xl"
              onClick={(e) => e.stopPropagation()}
            >
              <button
                type="button"
                onClick={closePreview}
                className="absolute -top-3 -right-3 rounded-full bg-white px-3 py-1.5 text-sm font-medium text-black shadow"
              >
                ‡∏õ‡∏¥‡∏î 
              </button>

              <div className="rounded-[7px] bg-white p-3">
                {preview.type === "image" ? (
                  <img
                    src={preview.src}
                    alt="evidence"
                    className="max-h-[75vh] w-full object-contain rounded-[7px]"
                  />
                ) : (
                  <video
                    src={preview.src}
                    controls
                    className="max-h-[75vh] w-full rounded-[7px]"
                  />
                )}
              </div>
            </div>
          </div>

        )}

        {/* upload car damage */}
        <div className="mb-5 flex items-center justify-center gap-2">

          <h2 className="text-base sm:text-lg font-semibold text-zinc-900">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢</h2>

        </div>
        {/* 4) ‡∏£‡∏π‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ + AI */}
        <div className="mt-6 min-w-0">
          
          <div className="rounded-[7px] ring-1p-3 sm:p-4 overflow-hidden">
            <DamagePhotosPanel
              apiBaseUrl={process.env.NEXT_PUBLIC_DETECT_API_URL as string}
              onChange={setDamageItems}
              value={damageItems} />
          </div>
        </div>
        


        {/* 6) ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° */}
        <div className="mt-6 flex items-start gap-2">
          <input id="agree" type="checkbox" checked={agreed} onChange={(e) => setAgreed(e.target.checked)} className="mt-1 h-4 w-4 rounded border-zinc-300 text-violet-600 focus:ring-violet-500" />
          <label htmlFor="agree" className="text-sm text-zinc-700">‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°</label>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏° */}
        <div className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end gap-3">
          <button type="button" onClick={onBack} className="w-full sm:w-auto rounded-[7px] font-medium bg-zinc-200 text-zinc-800 hover:bg-zinc-300 px-6 py-3 sm:py-2 ">‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          <button type="submit" disabled={!isValid} className={`w-full sm:w-auto rounded-[7px] bg-[#6D5BD0] hover:bg-[#433D8B] text-white px-6 py-2 font-medium shadow-sm disabled:opacity-50 ${isValid ? "bg-[#6D5BD0] hover:bg-[#433D8B]" : "bg-zinc-400 cursor-not-allowed"}`}>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</button>
        </div>
      </form>


      {/* ‡∏Å‡∏±‡∏ô bottom bar ‡∏ó‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ CarSelection */}
      <SafeAreaSpacer />

      <MapPickerModal
        open={showMapPicker}
        onClose={() => setShowMapPicker(false)}
        title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
        value={
          lat && lng
            ? { lat: parseFloat(lat), lng: parseFloat(lng) }
            : null
        }
        onSelect={(pos) => {
          setLat(pos.lat.toFixed(6));
          setLng(pos.lng.toFixed(6));
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ accuracy ‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≤‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏≠‡∏á) ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô null
          setAccuracy(null);
          setGeoStatus("success");
          setShowMapPicker(false);
        }}
      />
      {/* ‡∏Å‡∏±‡∏ô‡∏•‡πâ‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ */}
      <style jsx global>{`
        .acc-page { max-width: 100vw; overflow-x: hidden; }
        .acc-page * { min-width: 0; }
        .chip-scroller {
          overflow-x: auto; scroll-snap-type: x mandatory;
          -ms-overflow-style: none; scrollbar-width: none;
        }
        .chip-scroller::-webkit-scrollbar { display: none; }
        .acc-page input, .acc-page select, .acc-page textarea { max-width: 100%; }
        .acc-page img, .acc-page video { max-width: 100%; height: auto; }
        .chip-scroller::-webkit-scrollbar {
      height: 8px;
        }
        .chip-scroller::-webkit-scrollbar-track {
          background: #e5e7eb; /* ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
          border-radius: 999px;
        }
        .chip-scroller::-webkit-scrollbar-thumb {
          background: #6d5bd0; /* ‡∏°‡πà‡∏ß‡∏á */
          border-radius: 999px;
          transition: background 0.3s;
        }
        .chip-scroller::-webkit-scrollbar-thumb:hover {
          background: #433d8b; /* ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏° */
        }
      `}</style>
    </div>
  );
}
