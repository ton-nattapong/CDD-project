"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCamera, faTrashCan } from "@fortawesome/free-solid-svg-icons";
/** ---------- Types ---------- */
export type DamageSide = "‡∏ã‡πâ‡∏≤‡∏¢" | "‡∏Ç‡∏ß‡∏≤" | "‡∏´‡∏ô‡πâ‡∏≤" | "‡∏´‡∏•‡∏±‡∏á" | "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

export type DamagePhotoItem = {
  id: string;
  file: File | null;                 // ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL)
  previewUrl: string;                // blob:... ‡∏´‡∏£‡∏∑‡∏≠ https://...
  side: DamageSide;
  detecting: boolean;
  error?: string;
  total?: number;
  perClass?: Record<string, number>;
  note?: string;
};

type Props = {
  apiBaseUrl: string;                // ‡πÄ‡∏ä‡πà‡∏ô http://localhost:8000
  value?: DamagePhotoItem[];         // controlled from parent
  onChange?: (items: DamagePhotoItem[]) => void;
  maxTotalMB?: number;               // default 100
};
const DAMAGE_EN2TH: Record<string, string> = {
  "crack": "‡∏£‡πâ‡∏≤‡∏ß",
  "dent": "‡∏ö‡∏∏‡∏ö",
  "glass shatter": "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÅ‡∏ï‡∏Å",
  "lamp broken": "‡πÑ‡∏ü‡πÅ‡∏ï‡∏Å",
  "scratch": "‡∏Ç‡∏µ‡∏î‡∏Ç‡πà‡∏ß‡∏ô",
  "tire flat": "‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ô",
};

const toTHDamage = (s?: string) =>
  !s ? "" : DAMAGE_EN2TH[s] ?? s;

/** ---------- helpers ---------- */
function shallowRecordEqual(
  a?: Record<string, number>,
  b?: Record<string, number>
) {
  if (a === b) return true;
  if (!a || !b) return !a && !b;
  const ak = Object.keys(a);
  const bk = Object.keys(b);
  if (ak.length !== bk.length) return false;
  for (const k of ak) if (a[k] !== b[k]) return false;
  return true;
}

function shallowItemEqual(a: DamagePhotoItem, b: DamagePhotoItem) {
  return (
    a.id === b.id &&
    a.previewUrl === b.previewUrl &&
    a.file === b.file &&
    a.side === b.side &&
    a.total === b.total &&
    shallowRecordEqual(a.perClass, b.perClass)
    // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö detecting/error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô transient
  );
}

function shallowArrayEqual(a: DamagePhotoItem[], b: DamagePhotoItem[]) {
  if (a === b) return true;
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) if (!shallowItemEqual(a[i], b[i])) return false;
  return true;
}

/** ---------- Component ---------- */
export default function DamagePhotosPanel({
  apiBaseUrl,
  value,
  onChange,
  maxTotalMB = 100,
}: Props) {
  const [items, setItems] = useState<DamagePhotoItem[]>([]);
  const inputRef = useRef<HTMLInputElement | null>(null);
  // ---- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö popup ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ----
  const [notePopup, setNotePopup] = useState<{ open: boolean; id: string | null; text: string }>({
    open: false,
    id: null,
    text: "",
  });
  function updateNote(id: string, value: string) {
    setItems((prev) =>
      prev.map((it) =>
        it.id === id ? { ...it, note: value } : it
      )
    );
  }
  const openNoteFor = (id: string, preset?: string) => {
    // ‡∏î‡∏∂‡∏á note ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤ preload
    const it = itemsRef.current.find(x => x.id === id);
    setNotePopup({
      open: true,
      id,
      text: preset ?? it?.note ?? "",
    });
  };

  const saveNote = () => {
    if (!notePopup.id) return;
    const text = notePopup.text.trim();
    mutate(prev => prev.map(x => (x.id === notePopup.id ? { ...x, note: text || undefined } : x)));
    setNotePopup({ open: false, id: null, text: "" });
  };

  const closeNote = () => setNotePopup({ open: false, id: null, text: "" });

  // ‡πÉ‡∏ä‡πâ ref ‡πÄ‡∏Å‡πá‡∏ö items ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Å‡∏±‡∏ô stale ‡πÉ‡∏ô async)
  const itemsRef = useRef(items);
  useEffect(() => {
    itemsRef.current = items;
  }, [items]);

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏π‡∏õ: ‡∏Å‡∏≥‡∏•‡∏±‡∏á sync ‡∏à‡∏≤‡∏Å parent ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const syncingFromParent = useRef(false);

  // onChange ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const onChangeRef = useRef<Props["onChange"] | null>(null);
  useEffect(() => {
    onChangeRef.current = onChange ?? null;
  }, [onChange]);

  // ---- sync parent -> local (normalize + ‡∏Å‡∏±‡∏ô set ‡∏ã‡πâ‡∏≥) ----
  useEffect(() => {
    if (!value) return;

    const normalized: DamagePhotoItem[] = value.map((v) => ({
      id: v.id ?? crypto.randomUUID(),
      previewUrl: v.previewUrl ?? (v as any).url ?? "",
      file: v.file ?? null,
      side: v.side ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      detecting: false, // reset ‡πÄ‡∏™‡∏°‡∏≠
      total: typeof v.total === "number" ? v.total : undefined,
      perClass: v.perClass ?? undefined,
      note: v.note ?? undefined,
      error: undefined,
    }));

    const curr = itemsRef.current;
    if (!shallowArrayEqual(curr, normalized)) {
      syncingFromParent.current = true;       // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ parent
      setItems(normalized);
    }
    // dep ‡πÅ‡∏Ñ‡πà [value] ‡∏û‡∏≠ ‚Äî ‡πÄ‡∏£‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô itemsRef
  }, [value]);

  // ---- emit local -> parent ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£ sync ‡∏à‡∏≤‡∏Å parent ----
  useEffect(() => {
    if (syncingFromParent.current) {
      syncingFromParent.current = false;
      return; // ‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏¥‡∏á onChange ‡∏Å‡∏•‡∏±‡∏ö (‡∏Å‡∏±‡∏ô loop)
    }
    onChangeRef.current?.(items);
  }, [items]);

  // ‡∏£‡∏ß‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (MB)
  const totalMB = useMemo(
    () => items.reduce((s, it) => s + (it.file?.size ?? 0), 0) / (1024 * 1024),
    [items]
  );

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ) ‡πÅ‡∏•‡∏∞ emit ‡πÑ‡∏õ parent
  const mutate = (fn: (prev: DamagePhotoItem[]) => DamagePhotoItem[]) => {
    setItems((prev) => {
      const next = fn(prev);
      // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà sync ‡∏à‡∏≤‡∏Å parent
      // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ useEffect([items]) ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô emit (‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á flag)
      return next;
    });
  };

  /** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (image/*) */
  const addFiles = (files: FileList | null, side: DamageSide = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") => {
    if (!files) return;
    const newOnes: DamagePhotoItem[] = Array.from(files)
      .filter((f) => f.type.startsWith("image/"))
      .map((file) => ({
        id: crypto.randomUUID(),
        file,
        previewUrl: URL.createObjectURL(file),
        side,              // üü¢ ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ side ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        detecting: false,
      }));
    mutate((prev) => [...prev, ...newOnes]);
  };

  /** ‡∏•‡∏ö‡∏£‡∏π‡∏õ + revoke ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ blob: */
  const removeOne = (id: string) => {
    mutate((prev) => {
      const it = prev.find((x) => x.id === id);
      if (it && it.previewUrl.startsWith("blob:")) URL.revokeObjectURL(it.previewUrl);
      return prev.filter((x) => x.id !== id);
    });
  };

  /** ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ */
  const setSide = (id: string, side: DamageSide) =>
    mutate((prev) => prev.map((x) => (x.id === id ? { ...x, side } : x)));

  /** ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 1 ‡∏£‡∏π‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå) */
  const detectOne = async (id: string) => {
    // 1) set loading
    mutate(prev => prev.map(x => x.id === id ? { ...x, detecting: true, error: undefined } : x));

    const it = itemsRef.current.find(x => x.id === id);
    if (!it) return;

    let fileToSend: File | null = it.file;

    // 2) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL) -> ‡∏î‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô blob ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á File
    if (!fileToSend) {
      try {
        const resp = await fetch(it.previewUrl, { mode: "cors", credentials: "omit" });
        if (!resp.ok || resp.type === "opaque") throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (CORS)");

        const blob = await resp.blob();

        // ‡πÄ‡∏î‡∏≤‡∏ä‡∏∑‡πà‡∏≠/‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        const urlExt = it.previewUrl.split(".").pop()?.split("?")[0] || "jpg";
        const mimeExt = blob.type?.split("/")[1];
        const ext = mimeExt || urlExt || "jpg";

        fileToSend = new File([blob], `remote-${it.id}.${ext}`, { type: blob.type || "image/jpeg" });

        // cache ‡πÉ‡∏™‡πà state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î fetch ‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        const f = fileToSend;
        mutate(prev => prev.map(x => x.id === id ? { ...x, file: f } : x));
      } catch (err: any) {
        mutate(prev =>
          prev.map(x => x.id === id ? { ...x, detecting: false, error: err?.message || "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" } : x)
        );
        return;
      }
    }

    // 3) ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ API
    try {
      const fd = new FormData();
      fd.append("file", fileToSend!);           // ‡∏°‡∏µ‡πÅ‡∏ô‡πà‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      fd.append("side_hint", it.side);

      const base = apiBaseUrl.replace(/\/$/, "");
      const res = await fetch(`${base}/detect/count`, { method: "POST", body: fd });

      if (!res.ok) {
        let msg = `HTTP ${res.status}`;
        try { const err = await res.json(); msg = err?.detail || err?.error || msg; } catch { }
        throw new Error(msg);
      }

      const data: { total?: number; per_class?: Record<string, number> } = await res.json();

      mutate(prev =>
        prev.map(x =>
          x.id === id
            ? {
              ...x,
              detecting: false,
              total: typeof data.total === "number" ? data.total : 0,
              perClass: data.per_class || {},
            }
            : x
        )
      );
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏•‡∏¢ -> ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ï‡∏±‡∏î‡πÄ‡∏ä‡πá‡∏Ñ note ‡πÑ‡∏î‡πâ)
      const total = typeof data.total === "number" ? data.total : 0;
      const isEmpty = total === 0 || !data.per_class || Object.keys(data.per_class).length === 0;
      if (isEmpty) {
        const latest = itemsRef.current.find(x => x.id === id);
        if (!latest?.note) {
          openNoteFor(id, "");
        }
      }
    } catch (e: any) {
      mutate(prev =>
        prev.map(x => x.id === id ? { ...x, detecting: false, error: e?.message || "detect error" } : x)
      );
    }
  };


  /** ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå/‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß) */
  const detectAll = async () => {
    for (const it of itemsRef.current) {
      if (!it.file) continue;
      if (typeof it.total === "number") continue;
      // eslint-disable-next-line no-await-in-loop
      await detectOne(it.id);
    }
  };

  return (
    <div className="rounded-[7px]  p-4 bg-white">
      {/* ‡∏´‡∏±‡∏ß */}
      {/* <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">

        <div className="flex gap-2">
          <button
            type="button"
            onClick={() => inputRef.current?.click()}
            className="rounded-[7px] bg-zinc-700 px-3 py-2 text-sm text-white hover:bg-zinc-600"
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ
          </button>
          <button
            type="button"
            onClick={detectAll}
            disabled={
              items.length === 0 ||
              items.some((x) => x.detecting)
            }
            className="rounded-[7px]  px-3 py-2 text-sm font-medium text-white bg-[#6D5BD0]  hover:bg-[#433D8B] disabled:bg-zinc-600"
          >
            ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI
          </button>
        </div>
      </div> */}

      <div className="flex justify-center my-6">
        <div className="flex justify-center my-6">
          <div className="relative w-[300px] m-8">
            <img src="/elements/car-top-view.png" alt="car" className="w-full" />
            {(["‡∏´‡∏ô‡πâ‡∏≤", "‡∏´‡∏•‡∏±‡∏á", "‡∏ã‡πâ‡∏≤‡∏¢", "‡∏Ç‡∏ß‡∏≤"] as DamageSide[]).map((side, i) => (
              <label
                key={i}
                className="group absolute w-10 h-10 flex items-center justify-center rounded-full 
                   bg-[#433D8B] border-[6px] border-[#D9D4F3] shadow-lg cursor-pointer 
                   hover:bg-[#433D8B]/80 transition-all duration-300 
                   hover:scale-110 hover:ring-4 hover:ring-[#433D8B]/40 active:scale-95"
                style={{
                  ...(side === "‡∏´‡∏ô‡πâ‡∏≤" && { top: "-3rem", left: "50%", transform: "translateX(-50%)" }),
                  ...(side === "‡∏´‡∏•‡∏±‡∏á" && { bottom: "-3rem", left: "50%", transform: "translateX(-50%)" }),
                  ...(side === "‡∏ã‡πâ‡∏≤‡∏¢" && { top: "50%", left: "-1.5rem", transform: "translateY(-50%)" }),
                  ...(side === "‡∏Ç‡∏ß‡∏≤" && { top: "50%", right: "-1.5rem", transform: "translateY(-50%)" }),
                }}
              >
                <FontAwesomeIcon icon={faCamera} className="w-4 h-4 text-white" />

                {/* Tooltip */}
                <span
                  className="absolute -top-9 left-1/2 -translate-x-1/2 
                     px-2 py-1 rounded-md text-xs text-white bg-black/80 
                     opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap"
                >
                  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô {side}
                </span>

                <input
                  type="file"
                  accept="image/*"
                  multiple
                  className="hidden"
                  onChange={e => addFiles(e.target.files, side)}
                />
              </label>
            ))}
          </div>
        </div>

      </div>


      <div className="mt-15 p-5  rounded-xl bg-[#eeeeee] ">
        <h2 className="text-xl font-bold text-black">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢</h2>
        {/* ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÑ‡∏ü‡∏•‡πå (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ) */}
        <input
          ref={inputRef}
          type="file"
          accept="image/*"
          multiple
          className="hidden"
          onChange={(e) => addFiles(e.target.files)}
        />

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ */}
        {items.length === 0 ? (
          <div className="mt-3 text-sm text-black text-center">
            ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
          </div>
        ) : (

          <ul className="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">

            {items.map((it) => (
              <li
                key={it.id}
                className="flex flex-col rounded-xl border border-zinc-200 bg-white shadow-sm hover:shadow-md transition-shadow duration-300 p-4 h-full"
              >
                {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô + ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö */}
                <div className="flex items-center justify-between mb-3">
                  <select
                    value={it.side}
                    onChange={(e) => setSide(it.id, e.target.value as DamageSide)}
                    className="rounded-full bg-[#433D8B] px-3 py-1 text-sm text-white shadow-sm hover:bg-[#5c4abf] transition-colors duration-300"
                  >
                    <option value="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
                    <option value="‡∏ã‡πâ‡∏≤‡∏¢">‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</option>
                    <option value="‡∏Ç‡∏ß‡∏≤">‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤</option>
                    <option value="‡∏´‡∏ô‡πâ‡∏≤">‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤</option>
                    <option value="‡∏´‡∏•‡∏±‡∏á">‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á</option>
                  </select>

                  <button
                    type="button"
                    onClick={() => removeOne(it.id)}
                    className="rounded-lg bg-red-500 p-2 text-white hover:bg-red-600 transition-colors duration-200 flex items-center justify-center"
                  >
                    <FontAwesomeIcon icon={faTrashCan} className="w-4 h-4" />
                  </button>
                </div>

                {/* ‡∏£‡∏π‡∏õ‡∏£‡∏ñ */}
                <div className="flex justify-center">
                  <div className="w-full aspect-[4/3] flex items-center justify-center bg-zinc-50 rounded-lg overflow-hidden shadow-inner">
                    <img
                      src={it.previewUrl}
                      alt="damage"
                      className="max-h-full max-w-full "
                    />
                  </div>
                </div>

                {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ */}
                <div className="flex flex-col flex-1 mt-4">
                  <p className="text-sm font-medium text-center text-zinc-700">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
                  </p>
                  <textarea
                    value={it.note || ""}
                    onChange={(e) => updateNote(it.id, e.target.value)} // ‚úÖ auto-save
                    placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢"
                    className="mt-2 w-full flex-1 rounded-lg border border-zinc-300 px-3 py-2 text-sm text-zinc-800 placeholder-zinc-400 resize-none focus:outline-none focus:ring-2 focus:ring-[#433D8B]/50 transition-all duration-200"
                    rows={3}
                  />
                </div>
              </li>
            ))}
          </ul>
        )}

      </div>


      {/* Note Popup */}
      {/* {notePopup.open && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 p-4" onClick={closeNote}>
          <div className="w-full max-w-lg rounded-2xl bg-white p-4 sm:p-5" onClick={(e) => e.stopPropagation()}>
            <h4 className="text-sm font-semibold text-zinc-900">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏Å‡∏£‡∏ì‡∏µ AI ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô)</h4>
            <textarea
              value={notePopup.text}
              onChange={(e) => setNotePopup(p => ({ ...p, text: e.target.value }))}
              className="mt-3 w-full rounded-xl border border-zinc-300 px-3 py-2 text-sm"
              placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡∏ñ‡∏•‡∏≠‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢, ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏≤‡∏ö/‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÅ‡∏™‡∏á, ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏Ø‡∏•‡∏Ø"
              rows={4}
            />
            <div className="mt-3 flex justify-end gap-2">
              <button onClick={closeNote} type="button" className="rounded-xl bg-zinc-200 px-3 py-1.5 text-sm">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              <button onClick={saveNote} type="button" className="rounded-xl bg-violet-600 px-3 py-1.5 text-sm text-white">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            </div>
          </div>
        </div>
      )} */}
    </div>
  );
}
