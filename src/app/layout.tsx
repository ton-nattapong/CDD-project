// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navbar from "./components/Navbar";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";

// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å font loaders ‡∏ó‡∏µ‡πà module scope (‡∏ô‡∏≠‡∏Å component) ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô const
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á type ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î
type Role = "admin" | "customer" | null;
async function getUserRole(): Promise<Role> {
  const token = (await cookies()).get("token")?.value;
  if (!token) return null;

  try {
    const secret = new TextEncoder().encode(process.env.JWT_SECRET!);
    const { payload } = await jwtVerify(token, secret);
    const raw = (payload as any)?.role as unknown;

    // üëá ‡πÅ‡∏Ñ‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô union ‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (raw === "admin") return "admin";
    if (raw === "customer") return "customer";
    return null;
  } catch {
    return null;
  }
}
// ‚ö†Ô∏è layout ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô Server Component (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà "use client")
export default async function RootLayout({ children }: { children: React.ReactNode }) {
  const role = await getUserRole();
  const isAdmin = role === "admin";
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {/* <Navbar /> */}
        {/* {!isAdmin && <Navbar />}  */}
        <Navbar role={role} />
        <main className="md:ml-20">{children}</main>
      </body>
    </html>
  );
}
